
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
    previewFeatures = ["interactiveTransactions"]
  }
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_HOST")
  }

  model User {
    userId String @id @default(cuid())
    username String @unique @db.VarChar(16)
    email String  @unique @db.VarChar(100)
    birthDate DateTime @db.Date
    password String @db.Char(60)
    
    bio String? @db.VarChar(160)
    realName String? @db.VarChar(64)

    createdAt DateTime @default(now()) @db.Timestamp(0)
    updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

    scrobbles Scrobble[]
    eventsCreated Event[]
    eventsAttending EventAttendee[]
  }

    model Scrobble {
        scrobbleId String @id @default(cuid())
        userId String
        user User @relation(fields: [userId], references: [userId])
        songId String
        song Song @relation(fields: [songId], references: [songId])

        createdAt DateTime @default(now()) @db.Timestamp(0)
    }

    model Song {
        songId String @id @default(cuid())
        title String @db.VarChar(100)
        duration Int @db.Integer
        coverArtUrl String @db.VarChar(256)

        albumId String
        album Album @relation(fields: [albumId], references: [albumId])
        scrobbles Scrobble[]
        musicBrainzRecordingId String?

        createdAt DateTime @default(now()) @db.Timestamp(0)
    }

    model Album {
        albumId String @id @default(cuid())
        title String @db.VarChar(100)
        coverArtUrl String @db.VarChar(256)

        artistId String
        artist Artist @relation(fields: [artistId], references: [artistId])
        songs Song[]
        musicBrainzReleaseId String?
        createdAt DateTime @default(now()) @db.Timestamp(0)
    }
    
    model Artist {
        artistId String @id @default(cuid())
        name String @db.VarChar(100)
        coverArtUrl String @db.VarChar(256)

        albums Album[]
        events EventArtist[]

        musicBrainzArtistId String?
        createdAt DateTime @default(now()) @db.Timestamp(0)
    }

    model Event {
        eventId String @id @default(cuid())
        name String @db.VarChar(100)
        description String @db.VarChar(1000)
        pluscode String @db.VarChar(20)
        startTime DateTime @db.Timestamp(0)
        endTime DateTime @db.Timestamp(0)
        

        creatorId String
        creator User @relation(fields: [creatorId], references: [userId])
        
        attendees EventAttendee[]
        artists EventArtist[]

        createdAt DateTime @default(now()) @db.Timestamp(0)
        updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)
    }

    model EventAttendee {
        eventId String
        event Event @relation(fields: [eventId], references: [eventId])
        userId String
        user User @relation(fields: [userId], references: [userId])

        createdAt DateTime @default(now()) @db.Timestamp(0)
        updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

        @@id([eventId, userId])
    }

    model EventArtist {
        eventId String
        event Event @relation(fields: [eventId], references: [eventId])
        artistId String
        artist Artist @relation(fields: [artistId], references: [artistId])

        createdAt DateTime @default(now()) @db.Timestamp(0)
        updatedAt DateTime @updatedAt @default(now()) @db.Timestamp(0)

        @@id([eventId, artistId])
    }
    